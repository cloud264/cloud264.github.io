"use strict";(()=>{var n=class{constructor(t,e){this.x=t,this.y=e}getX(){return this.x}getY(){return this.y}};var r=class{static{this.GRID_SIZE_X=100}static{this.GRID_SIZE_Y=100}};var o=class{constructor(t){this.game=t,this.canvas=t.getCanvas(),this.ctx=this.canvas.getContext("2d")}render(){this.drawBackground()}drawBackground(){this.ctx.lineWidth=2,this.ctx.strokeStyle="#121212",this.ctx.fillStyle="#8dcdff",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}};var a=class{constructor(t,e){this.distanceFromStart=1/0;this.visited=!1;this.x=t,this.y=e}getX(){return this.x}getY(){return this.y}setDistanceFromStart(t){this.distanceFromStart=t}getDistanceFromStart(){return this.distanceFromStart}setVisited(t){this.visited=t}isVisited(){return this.visited}};var d=class{constructor(t){this.game=t,this.ctx=this.game.getCanvas().getContext("2d");let e=new a(78,80);e.setDistanceFromStart(0),this.currentNode=e,this.startNode=e,this.targetNode=new a(22,44),this.unvisitedNodes=new Set,this.visitedNodes=new Set,this.setupUnvisitedNodes()}setupUnvisitedNodes(){for(let t=0;t<r.GRID_SIZE_X;t++)for(let e=0;e<r.GRID_SIZE_Y;e++)this.unvisitedNodes.add(new a(t,e))}getNeighbors(t){let e=new Set;for(let i of this.unvisitedNodes)i.getX()===t.getX()-1&&i.getY()==t.getY()&&e.add(i),i.getX()===t.getX()+1&&i.getY()==t.getY()&&e.add(i),i.getX()===t.getX()&&i.getY()==t.getY()+1&&e.add(i),i.getX()===t.getX()&&i.getY()==t.getY()-1&&e.add(i);return e}getDistanceFromStart(t){let e=Math.max(this.startNode.getX(),t.getX()),i=Math.max(this.startNode.getY(),t.getY()),p=Math.min(this.startNode.getX(),t.getX()),c=Math.min(this.startNode.getY(),t.getY());return e-p+i-c}getNodeWithShortestDistanceToStart(){let t=this.unvisitedNodes.values().next().value;for(let e of this.unvisitedNodes)e.getDistanceFromStart()<t.getDistanceFromStart()&&(t=e);return t}findPath(){console.log("finding path"),this.unvisitedNodes.delete(this.currentNode),this.visitedNodes.add(this.currentNode);let t=this.getNeighbors(this.currentNode);for(let e of t)e.setDistanceFromStart(this.getDistanceFromStart(e));this.currentNode=this.getNodeWithShortestDistanceToStart()}drawNode(t){this.ctx.strokeRect(t.getX()*this.game.getCanvas().width/r.GRID_SIZE_X,t.getY()*this.game.getCanvas().height/r.GRID_SIZE_Y,this.game.getCanvas().width/r.GRID_SIZE_X,this.game.getCanvas().height/r.GRID_SIZE_Y)}renderPath(){for(let t of this.visitedNodes)this.ctx.strokeStyle="orange",this.drawNode(t);this.ctx.strokeStyle="red",this.drawNode(this.startNode),this.ctx.strokeStyle="green",this.drawNode(this.targetNode)}};var h=class{constructor(t){this.tick=t=>{this.deltaTime=(t-this.timestampOld)/1e3,this.timestampOld=t,this.pathfinder!==void 0&&this.pathfinder.findPath(),this.gameRenderer.render(),this.pathfinder!==void 0&&this.pathfinder.renderPath(),window.requestAnimationFrame(this.tick)};this.canvas=t,this.grid=[],this.deltaTime=0,this.timestampOld=0,this.pathfinder=new d(this),this.gameRenderer=new o(this),this.setupGrid()}restart(){this.deltaTime=0,this.timestampOld=0}setupGrid(){for(let t=0;t<r.GRID_SIZE_X;t++){this.grid[t]=[];for(let e=0;e<r.GRID_SIZE_Y;e++)this.grid[t][e]=new n(t,e)}}getCanvas(){return this.canvas}getGrid(){return this.grid}getTimeDelta(){return this.deltaTime}renderer(){return this.gameRenderer}};var m;function g(){let s=document.getElementById("dijkstra-canvas");m=new h(s),window.requestAnimationFrame(m.tick)}window.onload=g;})();
